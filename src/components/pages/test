from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from ast import literal_eval

app = Flask(__name__)
CORS(app)

# Read the CSV files
df1 = pd.read_csv('./archive2/tmdb_5000_credits.csv')
df2 = pd.read_csv('./archive2/tmdb_5000_movies.csv')
df1.columns = ['id', 'tittle', 'cast', 'crew']
df2 = df2.merge(df1, on='id')

# Define a TF-IDF Vectorizer Object. Remove all English stop words such as 'the', 'a'
tfidf = TfidfVectorizer(stop_words='english')

# Replace NaN with an empty string
df2['overview'] = df2['overview'].fillna('')

# Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(df2['overview'])

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Construct a reverse map of indices and movie titles
indices = pd.Series(df2.index, index=df2['tittle']).drop_duplicates()

# Parse the stringified features into their corresponding python objects
features = ['cast', 'crew', 'keywords', 'genres']
for feature in features:
    df2[feature] = df2[feature].apply(literal_eval)

# Get the director's name from the crew feature. If director is not listed, return NaN
def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

# Returns the list top 3 elements or entire list; whichever is more
def get_list(x):
    if isinstance(x, list):
        names = [i['name'] for i in x]
        if len(names) > 3:
            names = names[:3]
        return names
    return []

# Define new director, cast, genres, and keywords features that are in a suitable form
df2['director'] = df2['crew'].apply(get_director).fillna('')

features = ['cast', 'keywords', 'genres']
for feature in features:
    df2[feature] = df2[feature].apply(get_list)

# Function to convert all strings to lowercase and strip names of spaces
def clean_data(x):
    if isinstance(x, list):
        return [str.lower(i.replace(" ", "")) for i in x]
    else:
        if isinstance(x, str):
            return str.lower(x.replace(" ", ""))
        else:
            return ''

# Apply clean_data function to your features
features = ['cast', 'keywords', 'director', 'genres']
for feature in features:
    df2[feature] = df2[feature].apply(clean_data)

def create_soup(x):
    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])

df2['soup'] = df2.apply(create_soup, axis=1)

# Import CountVectorizer and create the count matrix
count = CountVectorizer(stop_words='english')
count_matrix = count.fit_transform(df2['soup'])

# Compute the Cosine Similarity matrix based on the count_matrix
cosine_sim2 = cosine_similarity(count_matrix, count_matrix)

def get_movie_id_by_title(title):
    movie = df2[df2['tittle'] == title]
    if not movie.empty:
        return movie['id'].values[0]
    else:
        return None

# Define the route for receiving movie titles
@app.route('/movie', methods=['POST'])
def receive_movie_title():
    title = request.json.get('title')
    print('Received movie title:', title)

    # Get recommendations based on the received movie title
    recommendations = get_recommendations(title, cosine_sim2)

    # Return the recommendations as a JSON response
    return jsonify({'recommendations': recommendations})

# Function that takes in movie title as input and outputs most similar movies
def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = indices[title]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Create an array of movie objects with title, id, and year
    recommendations = []
    for index in movie_indices:
        movie_info = {
            'title': df2['tittle'].iloc[index],
            'id': str(df2['id'].iloc[index]),
            'year': df2['release_date'].iloc[index].split('-')[0], # Extract the year from the release date
            'companies': df2['production_companies'].iloc[index]
        }
        recommendations.append(movie_info)

    # Return the top 10 most similar movies
    return recommendations

C = df2['vote_average'].mean()
m = df2['vote_count'].quantile(0.9)
q_movies = df2.copy().loc[df2['vote_count'] >= m]
q_movies.shape


def weighted_rating(x, m=m, C=C):
    v = x['vote_count']
    R = x['vote_average']
    # Calculation based on the IMDB formula
    return (v / (v + m) * R) + (m / (m + v) * C)


# Define a new feature 'score' and calculate its value with `weighted_rating()`
q_movies['score'] = q_movies.apply(weighted_rating, axis=1)
# Sort movies based on score calculated above
q_movies = q_movies.sort_values('score', ascending=False)


# Print the top 10 movies
top_movies = q_movies[['id','production_companies', 'genres', 'release_date','title', 'vote_count', 'vote_average', 'score']].head(10)
top_movies_data = top_movies.to_dict(orient='records')


# Define the route for sending movie data to the frontend
@app.route('/top_movies', methods=['GET'])
def send_top_movies():
    return jsonify({'top_movies': top_movies_data})



if __name__ == '__main__':
    app.run()

